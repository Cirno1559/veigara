<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hxzy.dao.workTime.AttendanceMapper">
  <resultMap id="BaseResultMap" type="com.hxzy.entity.workTime.Attendance">
    <id column="attendanceId" jdbcType="INTEGER" property="attendanceId" />
    <result column="adminId" jdbcType="INTEGER" property="adminId" />
    <result column="beginTime" jdbcType="TIMESTAMP" property="beginTime" />
    <result column="endTime" jdbcType="TIMESTAMP" property="endTime" />
    <result column="unAttendance" jdbcType="INTEGER" property="unAttendance" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    attendanceId, adminId, beginTime, endTime, unAttendance
  </sql>
  <select id="selectByExample" parameterType="com.hxzy.entity.workTime.AttendanceExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from attendance
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from attendance
    where attendanceId = #{attendanceId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from attendance
    where attendanceId = #{attendanceId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.hxzy.entity.workTime.AttendanceExample">
    delete from attendance
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.hxzy.entity.workTime.Attendance">
    insert into attendance (attendanceId, adminId, beginTime, 
      endTime, unAttendance)
    values (#{attendanceId,jdbcType=INTEGER}, #{adminId,jdbcType=INTEGER}, #{beginTime,jdbcType=TIMESTAMP}, 
      #{endTime,jdbcType=TIMESTAMP}, #{unAttendance,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.hxzy.entity.workTime.Attendance">
    insert into attendance
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="attendanceId != null">
        attendanceId,
      </if>
      <if test="adminId != null">
        adminId,
      </if>
      <if test="beginTime != null">
        beginTime,
      </if>
      <if test="endTime != null">
        endTime,
      </if>
      <if test="unAttendance != null">
        unAttendance,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="attendanceId != null">
        #{attendanceId,jdbcType=INTEGER},
      </if>
      <if test="adminId != null">
        #{adminId,jdbcType=INTEGER},
      </if>
      <if test="beginTime != null">
        #{beginTime,jdbcType=TIMESTAMP},
      </if>
      <if test="endTime != null">
        #{endTime,jdbcType=TIMESTAMP},
      </if>
      <if test="unAttendance != null">
        #{unAttendance,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.hxzy.entity.workTime.AttendanceExample" resultType="java.lang.Long">
    select count(*) from attendance
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update attendance
    <set>
      <if test="record.attendanceId != null">
        attendanceId = #{record.attendanceId,jdbcType=INTEGER},
      </if>
      <if test="record.adminId != null">
        adminId = #{record.adminId,jdbcType=INTEGER},
      </if>
      <if test="record.beginTime != null">
        beginTime = #{record.beginTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.endTime != null">
        endTime = #{record.endTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.unAttendance != null">
        unAttendance = #{record.unAttendance,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update attendance
    set attendanceId = #{record.attendanceId,jdbcType=INTEGER},
      adminId = #{record.adminId,jdbcType=INTEGER},
      beginTime = #{record.beginTime,jdbcType=TIMESTAMP},
      endTime = #{record.endTime,jdbcType=TIMESTAMP},
      unAttendance = #{record.unAttendance,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.hxzy.entity.workTime.Attendance">
    update attendance
    <set>
      <if test="adminId != null">
        adminId = #{adminId,jdbcType=INTEGER},
      </if>
      <if test="beginTime != null">
        beginTime = #{beginTime,jdbcType=TIMESTAMP},
      </if>
      <if test="endTime != null">
        endTime = #{endTime,jdbcType=TIMESTAMP},
      </if>
      <if test="unAttendance != null">
        unAttendance = #{unAttendance,jdbcType=INTEGER},
      </if>
    </set>
    where attendanceId = #{attendanceId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.hxzy.entity.workTime.Attendance">
    update attendance
    set adminId = #{adminId,jdbcType=INTEGER},
      beginTime = #{beginTime,jdbcType=TIMESTAMP},
      endTime = #{endTime,jdbcType=TIMESTAMP},
      unAttendance = #{unAttendance,jdbcType=INTEGER}
    where attendanceId = #{attendanceId,jdbcType=INTEGER}
  </update>
  <select id="findAttendRoleList"  resultType="Attendance">
  	SELECT * from attendance 
  	<where>
  	<if test="adminId != null">
       and  adminId=#{adminId}
    </if>
  	</where>
  	LIMIT #{offset},2
  </select>
  
  <select id="findAttendRoleCount"  resultType="int">
  	SELECT count(*) from attendance 
  	<where>
  	<if test="adminId != null">
       and  adminId=#{adminId},
    </if>
  	</where>
  </select>
  <select id="findAllAdminId" resultType="int">
  SELECT DISTINCT adminid FROM attendance
  </select>
</mapper>