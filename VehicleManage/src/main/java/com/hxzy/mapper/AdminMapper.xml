<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hxzy.dao.authority.AdminMapper">
  <resultMap id="BaseResultMap" type="com.hxzy.entity.authority.Admin">
    <id column="adminId" jdbcType="INTEGER" property="adminId" />
    <result column="adminLoginName" jdbcType="VARCHAR" property="adminLoginName" />
    <result column="adminLoginPwd" jdbcType="VARCHAR" property="adminLoginPwd" />
    <result column="adminState" jdbcType="INTEGER" property="adminState" />
    <association property="department" javaType="com.hxzy.entity.authority.Department">
    	<id column="departmentId" property="departmentId"/>
    	<result column="departmentName" property="departmentName"/>
    </association>
    <association property="job" javaType="com.hxzy.entity.authority.Job">
    	<id column="jobId" property="jobId"/>
    	<result column="jobName" property="jobName"/>
    </association>
    <association property="role" javaType="Role">
    	<id column="roleId" property="roleId"/>
    	<result column="roleName" property="roleName"/>   
    </association>
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
     adminId, adminLoginName, adminLoginPwd, adminState, d.departmentId,d.departmentName, j.jobId,j.jobName,r.roleId,r.roleName
  </sql>  <!-- 分页查询用户 -->
  <select id="selectByExample" parameterType="com.hxzy.entity.authority.AdminExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
      from admin  a join department d on a.departmentId=d.departmentId join job j on a.jobId=j.jobId join role r on a.roleId=r.roleId
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from admin
    where adminId = #{adminId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from admin
    where adminId = #{adminId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.hxzy.entity.authority.AdminExample">
    delete from admin
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.hxzy.entity.authority.Admin">
    insert into admin (adminId, adminLoginName, adminLoginPwd, 
      adminState, departmentId, jobId, 
      roleId)
    values (#{adminId,jdbcType=INTEGER}, #{adminLoginName,jdbcType=VARCHAR}, #{adminLoginPwd,jdbcType=VARCHAR}, 
      #{adminState,jdbcType=INTEGER}, #{departmentId,jdbcType=INTEGER}, #{jobId,jdbcType=INTEGER}, 
      #{roleId,jdbcType=INTEGER})
  </insert>
   <!-- 根据条件添加用户信息 -->
  <insert id="insertSelective" parameterType="com.hxzy.entity.authority.Admin">
    insert into admin
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="adminId != null">
        adminId,
      </if>
      <if test="adminLoginName != null">
        adminLoginName,
      </if>
      <if test="adminLoginPwd != null">
        adminLoginPwd,
      </if>
      <if test="adminState != null">
        adminState,
      </if>
      <if test="department != null">
       departmentId,
      </if>
      <if test="job != null">
        jobId,
      </if>
      <if test="role!= null">
        roleId,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="adminId != null">
        #{adminId,jdbcType=INTEGER},
      </if>
      <if test="adminLoginName != null">
        #{adminLoginName,jdbcType=VARCHAR},
      </if>
      <if test="adminLoginPwd != null">
        #{adminLoginPwd,jdbcType=VARCHAR},
      </if>
      <if test="adminState != null">
        #{adminState,jdbcType=INTEGER},
      </if>
      <if test="department != null">
        #{department.departmentId,jdbcType=INTEGER},
      </if>
      <if test="job != null">
        #{job.jobId,jdbcType=INTEGER},
      </if>
      <if test="role != null">
        #{role.roleId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.hxzy.entity.authority.AdminExample" resultType="java.lang.Long">
    select count(*) from admin
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
   <!-- 根据条件修改用户信息 -->
  <update id="updateByExampleSelective" parameterType="map">
    update admin
    <set>
      <if test="record.adminId != null">
        adminId = #{record.adminId,jdbcType=INTEGER},
      </if>
      <if test="record.adminLoginName != null">
        adminLoginName = #{record.adminLoginName,jdbcType=VARCHAR},
      </if>
      <if test="record.adminLoginPwd != null">
        adminLoginPwd = #{record.adminLoginPwd,jdbcType=VARCHAR},
      </if>
      <if test="record.adminState != null">
        adminState = #{record.adminState,jdbcType=INTEGER},
      </if>
      <if test="record.department != null">
        departmentId = #{record.record.department.departmentId,jdbcType=INTEGER},
      </if>
      <if test="record.job != null">
        jobId = #{record.job.jobId,jdbcType=INTEGER},
      </if>
      <if test="record.role != null">
        roleId = #{record.role.roleId,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update admin
    set adminId = #{record.adminId,jdbcType=INTEGER},
      adminLoginName = #{record.adminLoginName,jdbcType=VARCHAR},
      adminLoginPwd = #{record.adminLoginPwd,jdbcType=VARCHAR},
      adminState = #{record.adminState,jdbcType=INTEGER},
      departmentId = #{record.departmentId,jdbcType=INTEGER},
      jobId = #{record.jobId,jdbcType=INTEGER},
      roleId = #{record.roleId,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <!-- 根据条件修改用户信息 -->
  <update id="updateByPrimaryKeySelective" parameterType="com.hxzy.entity.authority.Admin">
    update admin
    <set>
      <if test="adminLoginName != null">
        adminLoginName = #{adminLoginName,jdbcType=VARCHAR},
      </if>
      <if test="adminLoginPwd != null">
        adminLoginPwd = #{adminLoginPwd,jdbcType=VARCHAR},
      </if>
      <if test="adminState != null">
        adminState = #{adminState,jdbcType=INTEGER},
      </if>
      <if test="department != null">
        departmentId = #{department.departmentId,jdbcType=INTEGER},
      </if>
      <if test="job != null">
        jobId = #{job.jobId,jdbcType=INTEGER},
      </if>
      <if test="role != null">
        roleId = #{role.roleId,jdbcType=INTEGER},
      </if>
    </set>
    where adminId = #{adminId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.hxzy.entity.authority.Admin">
    update admin
    set adminLoginName = #{adminLoginName,jdbcType=VARCHAR},
      adminLoginPwd = #{adminLoginPwd,jdbcType=VARCHAR},
      adminState = #{adminState,jdbcType=INTEGER},
      departmentId = #{departmentId,jdbcType=INTEGER},
      jobId = #{jobId,jdbcType=INTEGER},
      roleId = #{roleId,jdbcType=INTEGER}
    where adminId = #{adminId,jdbcType=INTEGER}
  </update>
  <!-- 根据用户名和密码查找用户信息 -->
  <select id="selectByNamePwd" resultMap="BaseResultMap">
  	select 
    <include refid="Base_Column_List" />
     from admin  a join department d on a.departmentId=d.departmentId join job j on a.jobId=j.jobId join role r on a.roleId=r.roleId
     where adminLoginName=#{adminLoginName} and adminLoginPwd=#{adminLoginPwd}
  </select>
  <select id="selectByName" resultMap="BaseResultMap">
  		select 
    <include refid="Base_Column_List" />
     from admin  a join department d on a.departmentId=d.departmentId join job j on a.jobId=j.jobId join role r on a.roleId=r.roleId
     where adminLoginName=#{adminLoginName} 
  </select>
</mapper>